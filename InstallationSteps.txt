Getting started with Production environment
https://kubernetes.io/docs/setup/production-environment/
Kubernetes deployment with kubeadm

https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

Requirements:
1. 2 GB or more of RAM per machin
2. 2 CPUs or more.
3. Full network connectivity between all machines in the cluster
4. Unique hostname, MAC address, and product_uuid for every node
5. Swap disabled. You MUST disable swap in order for the kubelet to work properly.

STEP 1: Installing a container runtime (Installing Docker On BOTH Master and Slave)

sudo yum update
sudo yum install docker
sudo systemctl enable docker.service
sudo systemctl start docker.service
systemctl status docker.service

STEP 2: INSTALL kubeadm on both master and slave

kubeadm: the command to bootstrap the cluster.

kubelet: the component that runs on all of the machines in your cluster and does things like starting pods and containers.

kubectl: the command line util to talk to your cluster.

Red Hat Based Distribution Installation steps

cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

# Set SELinux in permissive mode (effectively disabling it)
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

sudo systemctl enable --now kubelet

STEP 3:
To initialize the control-plane node run
kubeadm init <args>

kubeadm init --apiserver-advertise-address=private_ip_address_of_master_or_control_plane --pod-network-cidr=192.168.0.0/16

This command above initializes a Control Plane

OUTPUT >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user: (ON MASTER)

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a Pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  /docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root: (ON SLAVE)

  kubeadm join <control-plane-host>:<control-plane-port> --token <token> --discovery-token-ca-cert-hash sha256:<hash>
  
  RUN kubectl get nodes ON MASTER 
  To get list of nodes
  
  ----------------------------------------------------------------------------------------------------------------------------
  
  Now K8s does not have its own network plugin like docker , there are many 3rd party vendors providing this service
  https://kubernetes.io/docs/concepts/cluster-administration/addons/
  
  We are going to use calico
  
  Calico is a networking and network policy provider. Calico supports a flexible set of networking options so you can choose the most efficient option for your situation, including non-overlay and overlay networks, with or without BGP. Calico uses the same engine to enforce network policy for hosts, pods, and (if using Istio & Envoy) applications at the service mesh layer.
  
  STEP 4:
  Install Calico on Master Only
  
  
  
